searchState.loadedDescShard("zune_inflate", 0, "An incredibly spiffy deflate decoder.\nA deflate decoder instance.\nA simple Deflate Encoder.\nOptions that can influence decompression in …\nDecode a deflate stream returning the data as <code>Vec&lt;u8&gt;</code> or …\nDecode zlib-encoded data returning the uncompressed in a …\nEncode a deflate stream\nErrors possible when decoding deflate/zlib/gzip streams\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet whether the decoder will confirm a checksum after …\nGet deflate/zlib limit option\nGet the default set size hint for the decompressor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decompressor that will read compressed data …\nCreate a new deflate encoder.\nCreate new decoder with specified options\nSet whether the decoder should confirm a checksum after …\nSet a limit to the internal vector used to store decoded …\nSet the size hint for the decompressor\nInput data was malformed.\nAnything that isn’t significant\nAnything that isn’t significant but we need to pass back …\nA struct returned when decompression fails\nInput data is not enough to construct a full output\nOutput Adler does not match stored adler\nOutput CRC does not match stored CRC.\nLimit set by the user was exceeded by decompressed output\nDecoded data up until that decompression error\nreason why decompression fails\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decode wrapper with data being how many bytes …\nCreate a new decode wrapper with an empty vector")