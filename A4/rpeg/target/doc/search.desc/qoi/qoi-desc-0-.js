searchState.loadedDescShard("qoi", 0, "Fast encoder/decoder for QOI image format, implemented in …\nNumber of 8-bit channels in a pixel.\nImage color space.\nDecode QOI images from slices or from streams.\nEncode QOI images into buffers or into streams.\nContains the error value\nErrors that can occur during encoding or decoding.\nImage header: dimensions, channels, color space.\nInvalid number of channels: expected 3 or 4\nInvalid color space: expected 0 or 1\nInvalid image dimensions: can’t be empty or larger than …\nImage dimensions are inconsistent with image buffer length\nLeading 4 magic bytes don’t match when decoding\nInvalid stream end marker encountered when decoding\nGeneric I/O error from the wrapped reader/writer\nAll channels are linear\nContains the success value\nOutput buffer is too small to fit encoded/decoded image\nAlias for <code>Result</code> with the error type of <code>Error</code>.\nThree 8-bit channels (RGB)\nFour 8-bit channels (RGBA)\nsRGB with linear alpha\nInput buffer ended unexpectedly before decoding was …\nConverts to an integer (0 if sRGB, 1 if all linear).\nConverts to an integer (3 if RGB, 4 if RGBA).\nReturns the inferred number of channels.\nReturns the number of channels in the decoded image.\nNumber of 8-bit channels per pixel\nColor space (informative field, doesn’t affect encoding)\nReturns the undecoded tail of the input slice of bytes.\nDecode the image header from a slice of bytes.\nDecode the image into a pre-allocated buffer.\nDecodes the image to a pre-allocated buffer and returns …\nDecode the image into a newly allocated vector.\nDecodes the image into a newly allocated vector of bytes …\nThe maximum number of bytes the encoded image will take.\nThe maximum number of bytes the encoded image will take.\nEncode the image into a pre-allocated buffer.\nEncodes the image to a pre-allocated buffer and returns …\nEncodes the image directly to a generic writer that …\nEncode the image into a newly allocated vector.\nEncodes the image into a newly allocated vector of bytes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new decoder from a generic reader that …\nReturns the header that will be stored in the encoded …\nReturns the decoded image header.\nImage height in pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the decoder and returns the underlying reader …\nReturns true is all channels are linear.\nReturns true if there are 3 channels (RGB).\nReturns true if there are 4 channels (RGBA).\nReturns true if the color space is sRGB with linear alpha.\nReturns the total number of bytes in the raw pixel array.\nReturns a number of pixels in the image.\nCreates a new encoder from a given array of pixel data and …\nCreates a new decoder from a slice of bytes.\nReturns an immutable reference to the underlying reader.\nThe maximum number of bytes the encoded image will take.\nThe number of bytes the decoded image will take.\nCreates a new header and validates image dimensions.\nImage width in pixels\nReturns a new decoder with modified number of channels.\nCreates a new header with modified channels.\nReturns a new encoder with modified color space.\nCreates a new header with modified color space.")